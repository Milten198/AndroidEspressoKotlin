apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.example.lfrydrych.myapplication"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        //testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        testApplicationId "com.example.lfrydrych.test"
        testInstrumentationRunner "com.example.lfrydrych.test.cucumber.runner.Instrumentation"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        applicationVariants.all { variant ->
            def applicationId = variant.applicationId
            def adb = android.getAdbExecutable() as String
            def variantName = variant.name.capitalize()

            def grantPermissionTask = tasks.create("grant${variantName}Permission") {
                doLast {
                    "${adb} devices".execute().text.eachLine {
                        if (it.endsWith("device")) {
                            def device = it.split()[0]
                            println "Granting permission on device ${device}"
                            "${adb} -s ${device} shell pm grant ${applicationId} android.permission.WRITE_EXTERNAL_STORAGE".execute()
                            "${adb} -s ${device} shell pm grant ${applicationId} android.permission.READ_EXTERNAL_STORAGE".execute()
                        }
                    }
                }
            }
            grantPermissionTask.description = "Grants permissions on M+"
            grantPermissionTask.group = "extras"
        }
    }

    sourceSets {
        androidTest {
            assets {
                assets.srcDirs = ['src/androidTest/assets']
            }
            java {
                java.srcDirs = ['src/androidTest/java']
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
//Runner
    androidTestCompile( 'com.android.support.test:runner:0.4.1' ){
        exclude module: 'junit'
    }
//Cucumber
    androidTestCompile('info.cukes:cucumber-junit:1.1.4') {
        exclude module: 'cucumber-jvm-deps'
        exclude module: 'cucumber-core'
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    androidTestCompile('info.cukes:cucumber-android:1.2.4@jar') {
        exclude module: 'cucumber-jvm-deps'
    }
    androidTestCompile('info.cukes:cucumber-picocontainer:1.2.4') {
        exclude module: 'cucumber-core'
        exclude module: 'cucumber-jvm-deps'
    }
    androidTestCompile('info.cukes:cucumber-jvm:1.2.4') {
    }
    androidTestCompile('info.cukes:cucumber-core:1.2.4') {
        exclude module: 'cucumber-jvm-deps'
    }
    androidTestCompile('info.cukes:cucumber-jvm-deps:1.0.3') {
    }
//Espresso
    androidTestCompile( 'com.android.support.test.espresso:espresso-core:2.2.1' ){
        exclude module: 'junit'
        exclude module: 'runner'
    }
    androidTestCompile( 'com.android.support.test.espresso:espresso-contrib:2.2.1' ){
        exclude module: 'espresso-core'
        exclude module: 'support-v4'
    }
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    androidTestCompile 'com.squareup.spoon:spoon-client:1.7.1'
}
repositories {
    mavenCentral()
}

task('cucumberRaports') {
    def adb = android.getAdbExecutable() as String
    def copyReportsTask = tasks.create("copyReports") {
        doLast {

            def reportDir = new File(project.buildDir, "cucumber-reports")
            if (reportDir.exists()) {
                reportDir.deleteDir()
            }
            if (!reportDir.exists()) {
                reportDir.mkdirs()
            }
            "${adb} devices".execute().text.eachLine {
                if (it.endsWith("device")) {
                    def device = it.split()[0]
                    def deviceDir = reportDir.getAbsolutePath().toString() + "/" + device.toString()
                    println "Retrieving cucumber test report from device ${device} to ${deviceDir}"
                    "${adb} -s ${device} pull /mnt/sdcard/cucumber-reports/ ${deviceDir}".execute()
                }
            }
        }
    }
    copyReportsTask.description = "Get reports from device"
    copyReportsTask.group = "extras"

    def deleteOldReportsTask = tasks.create("deleteReports") {
        doLast {
            "${adb} devices".execute().text.eachLine {
                if (it.endsWith("device")) {
                    def device = it.split()[0]
                    println "Delete cucumber test reports from device ${device}"
                    "${adb} -s ${device} shell rm -rf /mnt/sdcard/cucumber-reports/".execute()
                }
            }
        }
    }
    deleteOldReportsTask.description = "Delete old reports from device"
    deleteOldReportsTask.group = "extras"
}
